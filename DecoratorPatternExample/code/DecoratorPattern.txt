using System;

public interface INotifier
{
    void Send(string message);
}

public class EmailNotifier : INotifier
{
    public void Send(string message)
    {
        Console.WriteLine($"Email sent: {message}");
    }
}

public abstract class NotifierDecorator : INotifier
{
    protected INotifier _notifier;

    public NotifierDecorator(INotifier notifier)
    {
        _notifier = notifier;
    }

    public virtual void Send(string message)
    {
        _notifier.Send(message); 
    }
}


public class SMSNotifier : NotifierDecorator
{
    public SMSNotifier(INotifier notifier) : base(notifier) {}

    public override void Send(string message)
    {
        base.Send(message); 
        Console.WriteLine($"SMS sent: {message}");
    }
}

public class SlackNotifier : NotifierDecorator
{
    public SlackNotifier(INotifier notifier) : base(notifier) {}

    public override void Send(string message)
    {
        base.Send(message);
        Console.WriteLine($"Slack message sent: {message}");
    }
}

public class Program
{
    public static void Main()
    {
        INotifier notifier = new EmailNotifier();

        notifier = new SMSNotifier(notifier);

        notifier = new SlackNotifier(notifier);

        notifier.Send("Server is down!");
    }
}
